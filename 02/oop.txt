Programowanie obiektowe w PHP
(OOP - Object Oriented Programming)

1. Klasy i obiekty

Klasa - typ zmiennych
Obiekt - zmienna

Obiekt = instancja klasy, egzemplarz klasy, instancja


<?php

class Calculator { }

$obj = new Calculator();


//Klasa Calculator
//obiekt $obj

?>


2. Nazewnictwo

Nazwy klas są wieloczłonowe, poszczególne człony oddzielamy znakiem \

Jan\Math\Calculator
Piotr\String\HtmlConverter

Pełna nazwa klasy: Jan\Math\Calculator

    Jan\Math    -  przestrzeń nazw
    Calculator  -  nazwa klasy

Ograniczenie: jeśli projekt składa się z wielu plików to:
 - wszystkie pliki muszą stosować przestrzenie nazw
 - żaden plik nie może stosować przestrzeni nazw


Standaryzacja języka PHP, tak by tworzony kod mógł być współdzielony
w wielu różnych projektach jest prowadzona przez grupę najbardziej
uznanych programistów:

    http://www.php-fig.org/
    https://github.com/php-fig/fig-standards

Standardy narzucają stosowanie przestrzeń nazewniczych.

W celu ułatwienia automatycznego ładowania klas należy
klasy umieszczać w folderach, których nazwa wynika z użytej
przestrzeni nazewniczej. Np.


Globalna nazwa klasy:

    Jan\Math\Calculator

Plik z klasą nazywa się Calculator.php

Uwaga: w jednym pliku będziemy umieszczali jedną klasę.
Zasada ta może być złamana w specyficznych okolicznościach
np. podczas pisania testów jednostkowych.

Plik jest umiesczony w folderze Jan\Math

W pliku Calculator.php umieszczamy zawartość:

<?php

namespace Jan\Math;

class Calculator { }

?>

Użycie klasy Calculator

  a) korzystamy z pełnej nazwy

    <?php

    require_once 'Jan/Math/Calculator.php';

    $obj = new Jan\Math\Calculator();

    ?>


   b) dzięki instrukcji use możemy korzystać ze skróconej nazwy klasy

    <?php

    require_once 'Jan/Math/Calculator.php';

    use Jan\Math\Calculator;

    $obj = new Calculator();

    ?>




Obiekty w globalnej przestrzeni nazewniczej poprzedzamy znakiem \

(np. wyjątki SPL http://www.php.net/manual/pl/spl.exceptions.php)

throw \InvalidArgumentException();

(np. klasa DateTime http://php.net/manual/pl/class.datetime.php)

$d = new \DateTime();



3. Składowe klasy

Klasa może zawierać właściwości i metody.

<?php

class User
{

    private $imie;
    private $nazwisko;

    public function setImie($imie)
    {
    }

    public function getImie()
    {
    }

}

?>

Cała klasa musi wystąpić w jednym pliku.
Implementacja metody (tj. treść) występuje w miejscu deklaracji.

Widoczność składowych:
- public
- protected
- private

Public:    składowa dostępna z dowolnego miejsca (zawsze widoczna).
Protected: składowa widoczna w klasie i w klasach potomnych.
Private:   składowa dostępna wyłącznie wewnątrz metod danej klasy.


Domyślnie: składowe są publiczne. Najlepiej jednak to ręcznie deklarować.

<?php

//plik Jan/User.php

namespace Jan;

class User
{
     private $nazwisko;

     protected $plec;

     public $wiek;

}

?>

Użycie:

<?php
//index.php

require_once 'Jan/User.php';

use Jan\User;

$obj = new User();

//Ok: składowa publiczna
$obj->wiek = 15;


//Błąd: składowa protected
$obj->plec = 'M';

//Błąd: składowa private
$obj->nazwisko = 'Kowalski';

?>


Domyślnie składowe klasy tworzymy w następujący sposób:
- właściwości - prywatne
- dla właściwości: metody set/get ustalające/zwracające wartości
- pozostałe metody: różnie



4. Składowe statyczne

Deklarowane przy użyciu słowa kluczowego static, np.:

public static $id;
public static function initializeConnection();


Właściwość statyczna: jest współdzielona przez wszystkie obiekty
(jedna wspólna zmienna dla wszystkich obiektów)

Metoda statyczna: może być wywoływana na rzecz klasy, nie tylko obiektu.

<?php
class Calculator
{
    public static $x;

    public static function add(...)
    {
        ...
    }

}
?>

Wywołanie metody statycznej add() przy użyciu ::

Calculator::add(...);

w przypadku właściwości:

Calculator::$x = 1234;


5. Składowe zwykłe


<?php
class Calculator
{

    public $y;

    public function setY(...)
    {
        ...
    }

}
?>

Dostęp do składowej zwykłej (tj. nie statycznej):
musimy utworzyć obiekt np.:

$obj = new Calculator();

$obj->setY(...);

echo $obj->y;



6. Dziedziczenie

Dziedziczenie klas definiujemy słowem kluczowym extends.

KLasy do reprezentacji znaczników i kodu HTML.


Klasa Ul, Ol
Klasa List
Klasa Element

Lista dziedziczy po elemencie
Ul oraz Ol dziedziczą po List


<?php
//Jan/Html/Element.php
namespace Jan\Html;
class Element { }
?>

<?php
//Jan/Html/List.php
namespace Jan\Html;
class List extends Element { }
?>

<?php
//Jan/Html/Ol.php
namespace Jan\Html;
class Ol extends List { }
?>

<?php
//Jan/Html/Ul.php
namespace Jan\Html;
class Ul extends List { }
?>










