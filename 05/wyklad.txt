1. Composer (użycie w celu automatycznego generowania autoloadingu)

Menadżer zależności Composer działa na podstawie pliku composer.json.
Plik ten jest w formacie JSON (JavaScript Object Notation).

Bibliografia o języku JSON:

    http://pl.wikipedia.org/wiki/JSON
    http://en.wikipedia.org/wiki/JSON
    http://www.json.org/

My wykorzystamy oprogramowanie composer do generowania
plików autoload.php.


W celu uruchomienia programu composer należy najpierw przygotować plik
composer.json.

Przykładowa zawartość pliku composer.json:


            {
                "autoload" : {
                    "psr-0" : { "Moja\Przestrzen\Nazw" : ""}
                },
                "target-dir" : "Moja/Przestrzen/Nazw"
            }

Po wydaniu polecenia:

    composer install

lub w pracowni:

    c:\xampp\php\php c:\xampp\php\composer.phar install

oprogramowanie composer utworzy folder vendor/, a w nim plik autoload.php.



2. TDD 
 Po co?
 - sprawdzamy działanie każdej funkcji z osobna (wyizolowanej)
 - usuwamy 95% błędów
 - jest to obecnie standard produkcji oprogramowania
   stosowany przez większość firm


3. TDD w praktyce: przykład minimalny

Pliki:
- Tablica.php   - testowana klasa (pełna nazwa: Janek\Util\Tablica)
- phpunit.xml   - konfiguracja testów jednostkowych
- composer.json - zależności, które wykorzystamy do generowania plików
                  autoload.php
- TablicaTest.php - klasa testów


Treść plików (Klasa Gajdaw\Util\Tablica):
-----------------------------------------
Tablica.php
<?php

namespace Gajdaw\Util;

class Tablica
{
    public function setItems($items)
    {
        throw new \RuntimeException('Not implemented yet');
    }
}
-----------------------------------------
phpunit.xml

<?xml version="1.0" encoding="utf-8" ?>
<phpunit bootstrap="vendor/autoload.php">
    <testsuites>
        <testsuite name="Tablica test suite">
            <directory>./Tests/</directory>
        </testsuite>
    </testsuites>
</phpunit>

-----------------------------------------
composer.json
{
    "autoload": {
        "psr-0": { "Gajdaw\\Util": "" }
    },
    "target-dir": "Gajdaw/Util"
}

-----------------------------------------
<?php

namespace Gajdaw\Util\Tests;

class TablicaTest extends \PHPUnit_Framework_TestCase
{
    public function testSetItems()
    {

        $this->markTestIncomplete('Not implemented');
    }
}


4. Uruchomienie przykładu minimalnego TDD

Jeśli phpunit i composer są dostępne w ścieżkach:

    composer install
    phpunit


Na pracowni:

    c:\xampp\php\php c:\xampp\php\composer.phar install
    c:\xampp\php\phpunit



Pokrycie testami:

    phpunit  --coverage-html coverage/


