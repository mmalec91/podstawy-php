Programowanie obiektowe - c.d.

1. Konstruktory i ich parametry

Konstruktor bezparametrowy ma definicję:


class Osoba
{
    private $imie;

    private $nazwisko;

    public function __construct()
    {
    }

    public setImie($imie)
    {
    }

    public setNazwisko($nazwisko)
    {
    }
}

Tak zdefiniowany konstruktor wywołujemy:

$obj = new Osoba();

W celu przypisania wartości do pól wywołujemy metody, np.:

$obj->setImie('Jan');
$obj->setNazwisko('Nowak');

Jeśli konstruktor ma parametr, np:

    public function __construct($imie)
    {
        $this->imie = $imie;
    }

Wtedy utowrzenie obiektu ma postać:

$obj = new Osoba('Henryk');

W przypadku definicji konstruktora:

    public function __construct($imie)

wówczas instrukcja:

    $obj = new Osoba();

będzie błędna.

Jeśli chcemy przekazać parametr w taki sposób, by był on opcjnalny, wówczas
ustalamy domyślną wartość parametru na null:


    public function __construct($imie = null)
    {
        $this->imie = $imie;
    }

Taka definicja konstruktora pozwala na wywołania:

    $o1 = new Osoba();
    $o2 = new Osoba('Krzysztof');

Rozwińmy to rozwiązanie na kilka parametrów, np. imię, nazwisko i wiek:


class Osoba
{
    private $imie;
    private $nazwisko;
    private $wiek;

    public function __construct($imie = null, $nazwisko = null, $wiek = null)
    {
        $this->imie = $imie;
        $this->nazwisko = $nazwisko;
        $this->wiek = $wiek;
    }

    public setImie($imie)
    {
    }

    public setNazwisko($nazwisko)
    {
    }

    public setWiek($wiek)
    {
    }
}

Teraz obiekty możemy konstruować następująco:

$o1 = new Osoba();
$o2 = new Osoba('Piotr');
$o3 = new Osoba('Adam', 'Kowalski');
$o4 = new Osoba('Nikodem', 'Dyzma', 49);

Wadą powyższego rozwiązania jest brak możliwości wywołania:

$o5 = new Osoba('Nowak');

Powyższe wywołanie ustali imię na Nowak.

Chcemy umożliwić wywołanie, w którym podamy tylko nazwisko.
Jak to zrobić? Możemy wykorzystać tablice. Do konstruktora
przekażemy tablicę, która będzie zawierała wartości dowolnych właściwości.

Wywołanie przyjmie postać:

$o = new Ososba(array('nazwisko' => 'Nowak'));

Implementacja takiego rozwiązania może być następująca:


    public function __construct($options)
    {

         // Czy w tablicy $options jest zawarte imie?
         // Jeśli tak, to przepisz je do składowej imie
         if (isset($options['imie'])) {
             $this->imie = $options['imie'];
         }

         // Czy w tablicy $options jest zawarte nazwisko?
         // Jeśli tak, to przepisz je do składowej nazwisko
         if (isset($options['nazwisko'])) {
             $this->nazwisko = $options['nazwisko'];
         }

         // Czy w tablicy $options jest zawarty wiek?
         // Jeśli tak, to przepisz go do składowej wiek
         if (isset($options['wiek'])) {
             $this->wiek = $options['wiek'];
         }

    }

Powyższy konstruktor umożliwia wywołania:

$o = new Ososba(array());
$o = new Ososba(array('nazwisko' => 'Nowak'));
$o = new Ososba(array('nazwisko' => 'Nowak', 'imie' => 'Stefan'));
$o = new Ososba(array('wiek' => 12, 'imie' => 'Marek'));

$o = new Ososba(array('imie' => 'John'));


Wywołanie, w którym podajemy
- tylko imię
- imię i nazwisko,
- imię, nazwisko i wiek
chcielibyśmy wywoływać:


$o = new Osoba('Piotr');
$o = new Osoba('Adam', 'Kowalski');
$o = new Osoba('Nikodem', 'Dyzma', 49);


Chcemy połączyć rozwiązania:

    $o = new Osoba('Piotr');
oraz
    $o = new Ososba(array('nazwisko' => 'Nowak'));

Implementacja takiego rozwiązania wykorzystuje funkcje sprawdzające
typ zmiennej:
   is_string()  -  wynik logiczny true mówi, że parametr jest typu string
   is_array()   -  wynik logiczny true mówi, że parametr jest tablicą
   is_integer() -  wynik logiczny true mówi, że parametr jest zmienną całkowitoliczbową

Pełna dokumentacja funkcji badających typ zmiennych jest dostępna na stronie:

    http://www.php.net/manual/en/ref.var.php


    public function __construct($options = null, $nazwisko = null, $wiek = null)
    {
         if (is_string($options)) {
             $this->imie = $options;
             if (is_string($nazwisko)) {
                 $this->nazwisko = $nazwisko;
             }
             if (is_integer($wiek)) {
                 $this->wiek = $wiek;
             }
         } else if (is_array($options) {

             // Czy w tablicy $options jest zawarte imie?
             // Jeśli tak, to przepisz je do składowej imie
             if (isset($options['imie'])) {
                 $this->imie = $options['imie'];
             }

             // Czy w tablicy $options jest zawarte nazwisko?
             // Jeśli tak, to przepisz je do składowej nazwisko
             if (isset($options['nazwisko'])) {
                 $this->nazwisko = $options['nazwisko'];
             }

             // Czy w tablicy $options jest zawarty wiek?
             // Jeśli tak, to przepisz go do składowej wiek
             if (isset($options['wiek'])) {
                 $this->wiek = $options['wiek'];
             }

         }
    }


Powyższa implementacja pozwala na wywołania:

    $o = new Osoba();
    $o = new Osoba('Piotr');
    $o = new Osoba('Piotr', 'Kowalski');
    $o = new Osoba('Piotr', 'Kowalski', 44);
    $o = new Ososba(array());
    $o = new Ososba(array('nazwisko' => 'Nowak'));
    $o = new Ososba(array(
        'nazwisko' => 'Nowak',
        'wiek' => 37
    ));

2. Metody magiczne

W klasach nie należy stosować następujących nazw metod:

__construct
__destruct
__call
__callStatic
__get
__set
__isset
__unset
__sleep
__wakeup
__toString
__invoke
__set_state
__clone

Powyższe metody są metodami wirtualnymi, wywoływanymi podczas różnych zdarzeń.

Metody te są nazywane magicznymi i umożliwiają dostosowanie klas do własnych potrzeb.
Pełna dokumentacja metod magicznych jest zawarta na stronie:

    http://php.net/manual/en/language.oop5.magic.php


Metoda __construct jest wywoływana automatycznie podczas tworzenia obiektu
operatorem new.

Metoda __destruct jest wywoływana automatycznie podczas niszczenia obiektu
(tj. gdy obiekt przestaje istnieć).

Metoda __call jest wywoływana wówczas, gdy wywołamy niezdefiniowaną metodę.

Metoda __callStatic jest wywoływana wówczas, gdy wywołamy niezdefiniowaną metodę statyczną.

Metoda __get jest wywoływana podczas dostępu (odczytu) do nieistniejącej właściwości.

Metoda __set jest wywoływana podczas dostępu (zapisu) nieistniejącej właściwości.

Metoda __isset jest wywoływana podczas badania istnienia nieistniejącej właściwości.

Metoda __unset jest wywoływana podczas usuwania nieistniejącej właściwości.

Metoda __sleep jest wywoływana podczas serializacji obiektu.

Metoda __wakeup jest wywoływana podczas deserializacji (tj. procesu odwrotnego do serializacji) obiektu.

Serializacja obiektu polega na konwersji obiektu do formatu, który może być zapisany
na dysku lub w bazie danych. Dzięki temu obiekt możemy zapisać na dysku i później
odtworzyć. Zapisanie obiektu na dysku wykorzystuje serializację.
Odtworzenie obiektu na podstawie zapisu - proces odwrotny do serializacji -
deserializacja.

Metoda __toString jest wywoływana podczas konwersji obiektu w typ string.

Metoda __clone jest wywoływana podczas klonowania obiektu.

Metoda __invoke jest wywoływana, gdy do obiektu odwołujemy się jak do funkcji.

Metoda __set_state jest wywoływana, gdy na obiekcie wywołujemy metodę var_export().

Funkcja var_export() zwraca uproszczoną reprezentację zmiennej. Jest ona przydatna
między innymi podczas debuggowania skryptu.


Przykład: __toString

    Co chcemy osiągnąć?

    $o = new Osoba('Jan');
    echo $o;

Zadanie
Jak napisać metodę __toString, która zwróci wartości wszystkich właściwości
obiektu oddzielone spacjami?

1. Konwersja obiektu w tablicę:  rzutowanie

    (array)$obiekt

2. Łączenie wszystkich elementów tablicy w jeden string:

    implode(' ', $tablica)


Przykład __set_state

















































